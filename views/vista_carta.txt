import tkinter as tk
import tkinter.ttk as ttk
from tkinter import Toplevel, Label, Button, messagebox

from modules.platos import listar_platos
from modules.pedidos import guardar_pedido
from views.vista_principal import dibujar_pantalla_principal

def restablecer_seleccion(tabla, estado_seleccion):
    for item in tabla.get_children():
        estado_seleccion[item] = False
        tabla.set(item, column="Seleccionado", value="‚úñ")

def mostrar_resumen(platos_elegidos, tabla_principal, estado_seleccion):
    ventana = Toplevel()
    ventana.overrideredirect(True)
    ventana.title("Resumen del Pedido")
    ventana.configure(bg='#A3AFF0')

    ancho = int(800 * 1.2)
    alto = int(500 * 1.2)
    ventana.update_idletasks()
    x = (ventana.winfo_screenwidth() // 2) - (ancho // 2)
    y = (ventana.winfo_screenheight() // 2) - (alto // 2)
    ventana.geometry(f"{ancho}x{alto}+{x}+{y}")

    Label(ventana, text="Resumen de tu pedido", font=('Aptos', 16, 'bold'), bg='#A3AFF0').pack(pady=10)

    estilo = ttk.Style()
    estilo.theme_use("default")
    estilo.configure("Resumen.Treeview", font=('Aptos', 14), rowheight=32,
                     background='#F2F3F4', fieldbackground='#F2F3F4')
    estilo.configure("Resumen.Treeview.Heading", font=('Aptos', 14, 'bold'))

    frame_tabla = tk.Frame(ventana, bg='#F2F3F4')
    frame_tabla.pack(padx=20, pady=10, fill='both', expand=True)

    columnas = ("Nombre", "Descripci√≥n", "Precio", "Cantidad")
    tabla = ttk.Treeview(frame_tabla, columns=columnas, show='headings',
                         height=8, style="Resumen.Treeview")
    tabla.pack(side='left', fill='both', expand=True)

    for col in columnas:
        tabla.heading(col, text=col)
        tabla.column(col, anchor='center')

    scrollbar = ttk.Scrollbar(frame_tabla, orient="vertical", command=tabla.yview)
    tabla.configure(yscrollcommand=scrollbar.set)
    scrollbar.pack(side='right', fill='y')

    total = 0
    for nombre, descripcion, precio, cantidad in platos_elegidos:
        tabla.insert("", "end", values=(nombre, descripcion, f"S/ {float(precio):.2f}", cantidad))
        total += float(precio) * int(cantidad)

    Label(ventana, text=f"Total: S/ {total:.2f}", font=('Aptos', 14, 'bold'),
          bg='#A3AFF0', fg='#27AE60').pack(pady=10)

    frame_botones = tk.Frame(ventana, bg='#A3AFF0')
    frame_botones.pack(pady=10)

    btn_confirmar = Button(frame_botones, text="Confirmar Pedido", font=('Aptos', 14),
        bg='#27AE60', fg='white', padx=10, pady=5,
        command=lambda: confirmar_pedido(platos_elegidos, ventana, tabla_principal, estado_seleccion))
    btn_confirmar.pack(side='left', padx=10)

    btn_modificar = Button(frame_botones, text="Modificar Pedido", font=('Aptos', 14),
        bg='#E67E22', fg='white', padx=10, pady=5,
        command=lambda: (
            ventana.destroy(),
            ttk.Style().configure("Carta.Treeview", background='white', fieldbackground='white')
        ))
    btn_modificar.pack(side='left', padx=10)

def confirmar_pedido(platos_elegidos, ventana_resumen, tabla_principal, estado_seleccion):
    pedido_id = guardar_pedido(platos_elegidos, mesero_id="MES123", mesa_id="M05")

    messagebox.showinfo(
        "Pedido confirmado",
        f"‚úÖ Tu pedido ha sido registrado con el n√∫mero:\n\n>> {pedido_id} <<"
    )

    tabla_principal.configure(style="Carta.Treeview")
    ttk.Style().configure("Carta.Treeview", background='white', fieldbackground='white')
    restablecer_seleccion(tabla_principal, estado_seleccion)
    ventana_resumen.destroy()

def mostrar_carta(root, usuario):
    dibujar_vista_carta(root, usuario)

def mostrar_descuentos(root):
    for widget in root.col_derecha.winfo_children():
        widget.destroy()
    root.col_derecha.configure(bg='white')
    lbl = tk.Label(root.col_derecha, text="Vista de Descuentos", font=('Aptos', 18, 'bold'), bg='white')
    lbl.pack(pady=20)


def dibujar_vista_carta(root, usuario):
    texto_bienvenida = f"Bienvenido {usuario.nombre} {usuario.apellidos}"
    root.lbl_subtitulo.config(text=texto_bienvenida)

    for widget in root.col_derecha.winfo_children():
        widget.destroy()
    root.col_derecha.configure(bg='#e6f2ff')
    root.col_derecha.place(relx=0.2, rely=0.0, relwidth=0.8, relheight=1.0)

    if usuario.rol == "cliente":
        for widget in root.col_izquierda.winfo_children():
            widget.destroy()
        root.col_izquierda.configure(bg='#e6f2ff')
        root.col_izquierda.place(relx=0.0, rely=0.0, relwidth=0.2, relheight=1.0)

        # ‚úÖ Lista de botones con texto, acci√≥n y colores personalizados
        botones = [
            ("Carta", lambda: mostrar_carta(root, usuario), "#27AE60", "#2ECC71",
             "white"),
            ("Descuentos", lambda: mostrar_descuentos(root), "#2980B9", "#3498DB",
             "white"),
            ("Reportes", lambda: print("Reportes"), "#E67E22", "#D35400", "white"),
            ("Promociones", lambda: print("Promociones"), "#8E44AD", "#9B59B6",
             "white"),
            ("Cerrar sesi√≥n", lambda: dibujar_pantalla_principal(root), "#C0392B",
             "#E74C3C", "white")  # üî¥ Bot√≥n adicional
        ]

        for texto, accion, color_bg, color_active, color_fg in botones:
            btn = tk.Button(root.col_izquierda, text=texto, font=('Aptos', 14, 'bold'),
                            bg=color_bg, fg=color_fg,
                            activebackground=color_active, activeforeground=color_fg,
                            relief='flat', bd=0, cursor='hand2',
                            width=15, height=2, command=accion)
            btn.pack(pady=8, padx=10, anchor='nw')

        lbl_menu = tk.Label(root.col_izquierda, text="Opciones:",
                            font=('Aptos', 16, 'bold'),
                            bg='#e6f2ff', fg='black', padx=10, pady=10)
        lbl_menu.pack(pady=(20, 10), padx=10, anchor='nw')

    estilo = ttk.Style()
    estilo.theme_use("default")
    estilo.configure("Carta.Treeview", font=('Aptos', 14), rowheight=32,
                     background='white', fieldbackground='white')
    estilo.configure("Carta.Treeview.Heading", font=('Aptos', 14, 'bold'))

    # ‚úÖ Reducci√≥n del 5% en ancho y alto
    frame_carta = tk.Frame(root.col_derecha, bg='white', bd=2, relief='groove')
    frame_carta.place(relx=0.025, rely=0.03, relwidth=0.95, relheight=0.9)

    lbl_titulo = tk.Label(frame_carta, text="Carta del Restaurante",
                          font=('Aptos', 18, 'bold'), bg='white')
    lbl_titulo.pack(pady=(0, 10))

    frame_tabla = tk.Frame(frame_carta, bg='white')
    frame_tabla.pack(fill='both', expand=True)

    columnas = ("Seleccionado", "Nombre", "Descripci√≥n", "Precio", "Cantidad")
    tabla = ttk.Treeview(frame_tabla, columns=columnas, show='headings',
                         height=15, style="Carta.Treeview")
    tabla.pack(side='left', fill='both', expand=True)

    for col in columnas:
        tabla.heading(col, text=col)
        tabla.column(col, anchor='center')

    scrollbar = ttk.Scrollbar(frame_tabla, orient="vertical", command=tabla.yview)
    tabla.configure(yscrollcommand=scrollbar.set)
    scrollbar.pack(side="right", fill="y")

    estado_seleccion = {}

    platos = listar_platos()
    for p in platos:
        if p.activo:
            item_id = tabla.insert("", "end", values=("‚úñ", p.nombre, p.descripcion, f"{p.precio:.2f}", "1"))
            estado_seleccion[item_id] = False

    def alternar_verificacion(event):
        item = tabla.identify_row(event.y)
        col = tabla.identify_column(event.x)
        if col == "#1" and item:
            estado_seleccion[item] = not estado_seleccion[item]
            tabla.set(item, column="Seleccionado", value="‚úî" if estado_seleccion[item] else "‚úñ")

    def editar_cantidad(event):
        item = tabla.identify_row(event.y)
        col = tabla.identify_column(event.x)
        if col == "#5" and item:
            x, y, width, height = tabla.bbox(item, column=col)
            entry = tk.Entry(tabla, font=('Aptos', 12), justify='center')
            entry.place(x=x, y=y, width=width, height=height)
            entry.insert(0, tabla.set(item, "Cantidad"))

            def guardar(event):
                valor = entry.get()
                if valor.isdigit() and int(valor) > 0:
                    tabla.set(item, "Cantidad", valor)
                    estado_seleccion[item] = True
                    tabla.set(item, column="Seleccionado", value="‚úî")
                entry.destroy()

            entry.bind("<Return>", guardar)
            entry.focus()

    tabla.bind("<Button-1>", alternar_verificacion)
    tabla.bind("<Double-1>", editar_cantidad)

    def confirmar_seleccion():
        platos_elegidos = []
        for item in tabla.get_children():
            if estado_seleccion.get(item):
                valores = tabla.item(item, 'values')
                nombre, descripcion, precio, cantidad = valores[1], valores[2], valores[3], valores[4]
                platos_elegidos.append((nombre, descripcion, float(precio), int(cantidad)))

        if not platos_elegidos:
            messagebox.showwarning("Sin selecci√≥n", "‚ö†Ô∏è No has marcado ning√∫n plato.")
            return

        estilo.configure("Carta.Treeview", background='#D5D8DC', fieldbackground='#D5D8DC')
        mostrar_resumen(platos_elegidos, tabla, estado_seleccion)

    frame_botones = tk.Frame(frame_carta, bg='white')
    frame_botones.pack(pady=10)

    btn_confirmar = tk.Button(frame_botones, text="Confirmar selecci√≥n", font=('Aptos', 14, 'bold'),
        bg='#2980B9', fg='white', padx=10, pady=5,
        activebackground='#2471A3', cursor='hand2',
        command=confirmar_seleccion)
    btn_confirmar.pack(side='left', padx=10)

    btn_reset = tk.Button(frame_botones, text="Restablecer selecci√≥n", font=('Aptos', 14, 'bold'),
        bg='#E67E22', fg='white', padx=10, pady=5,
        activebackground='#D35400', cursor='hand2',
        command=lambda: restablecer_seleccion(tabla, estado_seleccion))
    btn_reset.pack(side='left', padx=10)
